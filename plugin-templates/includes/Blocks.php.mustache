<?php
/**
 * Blocks API: Blocks class
 *
 * @package    {{pascaleNamespace}}/{{slugPascalCase}}
 * @since      {{version}}
 * @version    {{version}}
 */

declare( strict_types=1 );

namespace {{pascaleNamespace}}\{{slugPascalCase}};

defined( 'ABSPATH' ) || die( 'Keep Silent' );

/**
 *  Blocks Class.
 *
 * @since {{version}}
 */
class Blocks {

	use Singleton;
	use Common;

	/**
	 * Initialise class.
	 *
	 * @since {{version}}
	 */
	protected function __construct() {
		$this->hooks();
		$this->init();

		/**
		 * Action to signal that Plugin has finished loading.
		 *
		 * @param Blocks $instance Plugin Object.
		 *
		 * @since {{version}}
		 */
		do_action( '{{namespaceSnakeCase}}_{{slugSnakeCase}}_blocks_loaded', $this );
	}

	/**
	 * Blocks Hooks
	 *
	 * @return void
	 * @since {{version}}
	 */
	public function hooks() {
		add_action( 'init', array( $this, 'register_blocks' ) );
		add_action( 'wp_enqueue_scripts', array( $this, 'frontend_scripts' ) );
		add_action( 'enqueue_block_editor_assets', array( $this, 'block_editor_scripts' ) );
		add_filter( 'block_categories_all', array( $this, 'add_block_category' ) );
	}

	/**
	 * Initialize Blocks Included Classes
	 *
	 * @return void
	 * @since {{version}}
	 */
	public function init() {
	}

	/**
	 *  Add custom block category
	 *
	 * @param array<int, array<string, string|null>> $block_categories Available block category.
	 *
	 * @return array<int, array<string, string|null>>  With new block categories.
	 * @since {{version}}
	 */
	public function add_block_category( array $block_categories ): array {
		$available_slugs = wp_list_pluck( $block_categories, 'slug' );

		$category = array(
			'slug'  => 'storepress',
			'title' => esc_html__( 'StorePress', '{{textdomain}}' ),
			'icon'  => null,
		);

		if ( ! in_array( 'storepress', $available_slugs, true ) ) {
			$block_categories[] = $category;
		}

		return $block_categories;
	}

	/**
	 * Block Editor Script
	 *
	 * @return void
	 * @since {{version}}
	 * @see   https://developer.wordpress.org/reference/functions/wp_set_script_translations/
	 * @see   https://developer.wordpress.org/block-editor/how-to-guides/internationalization/#load-translation-file
	 */
	public function block_editor_scripts() {
		// Editor Scripts.
		$editor_script_src_url    = {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_url() . '/editor-scripts.js';
		$editor_script_asset_file = {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_path() . '/editor-scripts.asset.php';
		$editor_script_asset      = require $editor_script_asset_file;

		wp_enqueue_script( '{{kebabNamespace}}-{{kebabSlug}}-editor-scripts', $editor_script_src_url, $editor_script_asset['dependencies'], $editor_script_asset['version'], array( 'strategy' => 'defer' ) );
		wp_set_script_translations( '{{kebabNamespace}}-{{kebabSlug}}-editor-scripts', '{{textdomain}}', {{namespaceSnakeCase}}_{{slugSnakeCase}}()->plugin_path() . '/languages' );
	}

	/**
	 * Block Frontend Script
	 *
	 * @return void
	 * @since {{version}}
	 */
	public function frontend_scripts() {
		$js_file_url  = {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_url() . '/frontend.js';
		$css_file_url = {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_url() . '/frontend.css';
		$asset_file   = {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_path() . '/frontend.asset.php';
		if ( ! file_exists( $asset_file ) ) {
			return;
		}

		$asset = include_once $asset_file;

		wp_register_style( '{{kebabNamespace}}-{{kebabSlug}}-frontend-style', $css_file_url, array(), $asset['version'] );
		wp_register_script( '{{kebabNamespace}}-{{kebabSlug}}-frontend-script', $js_file_url, $asset['dependencies'], $asset['version'], array( 'strategy' => 'defer' ) );
	}

	/**
	 * Register Blocks.
	 *
	 * @return void
	 * @since {{version}}
	 */
	public function register_blocks() {
		if ( ! file_exists( {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_path() ) ) {
			return;
		}

		// Scanning block.json directory.
		$block_json_files = glob( {{namespaceSnakeCase}}_{{slugSnakeCase}}()->build_path() . '/**/block.json' );

		// Auto register all blocks that were found.
		foreach ( $block_json_files as $filename ) {
			$block_type = dirname( $filename );
			register_block_type( $block_type );
		}
	}

	/**
	 * Returns an array of allowed HTML tags and attributes for a given context.
	 *
	 * @param array<string, mixed> $args extra argument.
	 *
	 * @return array<string, mixed>
	 * @since {{version}}
	 */
	public function get_kses_allowed_html( array $args = array() ): array {
		$defaults = wp_kses_allowed_html( 'post' );

		$tags = array(
			'svg'   => array( 'class', 'aria-hidden', 'aria-labelledby', 'role', 'xmlns', 'width', 'height', 'viewbox', 'height' ),
			'g'     => array( 'fill' ),
			'title' => array( 'title' ),
			'path'  => array( 'd', 'fill' ),
		);

		$allowed_args = array_reduce(
			array_keys( $tags ),
			function ( $carry, $tag ) use ( $tags ) {
				$carry[ $tag ] = array_fill_keys( $tags[ $tag ], true );

				return $carry;
			},
			array()
		);

		return array_merge( $defaults, $allowed_args, $args );
	}
}
